name: Snap Build

on:
  push:
    tags:
      - 'v*'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # deploy-snap:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - uses: snapcore/action-build@v1
  #     id: snapcraft
  #   - run: |
  #       echo ${{secrets.SNAPCRAFT_TOKEN}} | snapcraft login --with -
  #       snapcraft upload ${{steps.snapcraft.outputs.snap}}
  #   - uses: actions/upload-artifact@v2
  #     with:
  #       name: snap
  #       path: ${{steps.snapcraft.outputs.snap}}
  deploy-appImage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v1
        with:
          channel: dev
      - run: flutter config --enable-linux-desktop
      - run:  sudo apt-get install clang cmake ninja-build pkg-config libgtk-3-dev libblkid-dev liblzma-dev libjsoncpp-dev libsecret-1-dev
      - run: |
          cd uet_lms_app
          flutter pub get
          scripts/make_appimage
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }} 
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          repo: uet-lms-release
          body: New release
          draft: false
          prerelease: true 
      - id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        name: Upload .zsync
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./UET_LMS-x86_64.AppImage.zsync
          asset_name: UET_LMS-x86_64.AppImage.zsync
          asset_content_type: application/octet-stream
      - id: upload-release-asset-2 
        uses: actions/upload-release-asset@v1
        name: Upload .AppImage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./UET_LMS-x86_64.AppImage
          asset_name: UET_LMS-x86_64.AppImage
          asset_content_type: application/octet-stream